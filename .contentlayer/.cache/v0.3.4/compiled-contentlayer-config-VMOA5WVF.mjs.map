{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n  defineDocumentType,\r\n  ComputedFields,\r\n  makeSource,\r\n} from \"contentlayer/source-files\";\r\nimport { writeFileSync } from \"fs\";\r\nimport GithubSlugger from \"github-slugger\";\r\nimport path from \"path\";\r\n// Remark packages\r\nimport remarkGfm from \"remark-gfm\";\r\nimport {\r\n  remarkExtractFrontmatter,\r\n  remarkCodeTitles,\r\n  remarkImgToJsx,\r\n  extractTocHeadings,\r\n} from \"pliny/mdx-plugins/index.js\";\r\n// Rehype packages\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypeKatex from \"rehype-katex\";\r\nimport rehypeCitation from \"rehype-citation\";\r\nimport rehypePrismPlus from \"rehype-prism-plus\";\r\nimport rehypePresetMinify from \"rehype-preset-minify\";\r\n// import siteMetadata from \"./data/siteMetadata\";\r\nimport { allCoreContent, sortPosts } from \"pliny/utils/contentlayer\";\r\n\r\n// const root = process.cwd();\r\n\r\n// const computedFields: ComputedFields = {\r\n//   // readingTime: { type: \"json\", resolve: (doc) => readingTime(doc.body.raw) },\r\n//   slug: {\r\n//     type: \"string\",\r\n//     resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, \"\"),\r\n//   },\r\n//   path: {\r\n//     type: \"string\",\r\n//     resolve: (doc) => doc._raw.flattenedPath,\r\n//   },\r\n//   filePath: {\r\n//     type: \"string\",\r\n//     resolve: (doc) => doc._raw.sourceFilePath,\r\n//   },\r\n//   toc: { type: \"string\", resolve: (doc) => extractTocHeadings(doc.body.raw) },\r\n// };\r\n\r\n/**\r\n * Count the occurrences of all tags across Post posts and write to json file\r\n */\r\n// function createTagCount(allPosts) {\r\n//   const tagCount: Record<string, number> = {};\r\n//   allPosts.forEach((file) => {\r\n//     if (file.tags && file.draft !== true) {\r\n//       file.tags.forEach((tag) => {\r\n//         const formattedTag = GithubSlugger.slug(tag);\r\n//         if (formattedTag in tagCount) {\r\n//           tagCount[formattedTag] += 1;\r\n//         } else {\r\n//           tagCount[formattedTag] = 1;\r\n//         }\r\n//       });\r\n//     }\r\n//   });\r\n//   writeFileSync(\"./app/tag-data.json\", JSON.stringify(tagCount));\r\n// }\r\n\r\n// function createSearchIndex(allPosts) {\r\n//   if (\r\n//     siteMetadata?.search?.provider === \"kbar\" &&\r\n//     siteMetadata.search.kbarConfig.searchDocumentsPath\r\n//   ) {\r\n//     writeFileSync(\r\n//       `public/${siteMetadata.search.kbarConfig.searchDocumentsPath}`,\r\n//       JSON.stringify(allCoreContent(sortPosts(allPosts)))\r\n//     );\r\n//     console.log(\"Local search index generated...\");\r\n//   }\r\n// }\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: \"**/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    author: { type: \"string\", required: true },\r\n    createdAt: { type: \"string\", required: true },\r\n    updatedAt: { type: \"string\", required: false },\r\n    description: { type: \"string\", required: true },\r\n    // slug: { type: \"string\", required: true },\r\n    // tags: { type: \"list\", of: Tag },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: \"string\",\r\n      resolve: (post) => post._raw.flattenedPath,\r\n    },\r\n  },\r\n}));\r\n\r\n// export const Authors = defineDocumentType(() => ({\r\n//   name: \"Authors\",\r\n//   filePathPattern: \"authors/**/*.mdx\",\r\n//   contentType: \"mdx\",\r\n//   fields: {\r\n//     name: { type: \"string\", required: true },\r\n//     avatar: { type: \"string\" },\r\n//     occupation: { type: \"string\" },\r\n//     company: { type: \"string\" },\r\n//     email: { type: \"string\" },\r\n//     twitter: { type: \"string\" },\r\n//     linkedin: { type: \"string\" },\r\n//     github: { type: \"string\" },\r\n//     layout: { type: \"string\" },\r\n//   },\r\n//   computedFields,\r\n// }));\r\n\r\nexport default makeSource({\r\n  contentDirPath: \"./posts\",\r\n  documentTypes: [Post],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: \"one-dark-pro\",\r\n          onVisitLine(node) {\r\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\r\n            // lines to be copy/pasted\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: \"text\", value: \" \" }];\r\n            }\r\n          },\r\n          onVisitHighlightedLine(node) {\r\n            node.properties.className.push(\"line--highlighted\");\r\n          },\r\n          onVisitHighlightedWord(node) {\r\n            node.properties.className = [\"word--highlighted\"];\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: [\"anchor\"],\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n  // onSuccess: async (importData) => {\r\n  //   const { allPosts } = await importData();\r\n  //   createTagCount(allPosts);\r\n  //   createSearchIndex(allPosts);\r\n  // },\r\n});\r\n"],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EAEA;AAAA,OACK;AAKP,OAAO,eAAe;AAQtB,OAAO,gBAAgB;AACvB,OAAO,sBAAsB;AAC7B,OAAO,4BAA4B;AA4D5B,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,WAAW,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC5C,WAAW,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC7C,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA;AAAA;AAAA,EAGhD;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,KAAK,KAAK;AAAA,IAC/B;AAAA,EACF;AACF,EAAE;AAoBF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,YAAY,MAAM;AAGhB,gBAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,mBAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,YAC/C;AAAA,UACF;AAAA,UACA,uBAAuB,MAAM;AAC3B,iBAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,UACpD;AAAA,UACA,uBAAuB,MAAM;AAC3B,iBAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,UAClD;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,QAAQ;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAMF,CAAC;",
  "names": []
}
